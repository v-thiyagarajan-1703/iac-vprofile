name: "Vprofile IAC"

on:
  push:
    branches:
      - main
      - stage
    paths:
      - 'terraform/**'
      - 'Terraform/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'Terraform/**'
      - '.github/workflows/**'

jobs:
  terraform:
    name: "Apply Terraform code changes"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
      AWS_REGION: us-east-1
      EKS_CLUSTER: vprofile-eks
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.3

      - name: Terraform Init
        run: terraform init \
          -backend-config="bucket=${{ env.BUCKET_TF_STATE }}" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="key=terraform.tfstate"

      - name: Terraform format
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -no-color -input=false -auto-approve planfile

      - name: Get Kube config file
        if: steps.apply.outcome == 'success'
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Install Ingress Controller
        if: steps.apply.outcome == 'success'
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.9.0/deploy/static/provider/aws/deploy.yaml
          kubectl wait --namespace ingress-nginx \
            --for=condition=available deployment/ingress-nginx-controller \
            --timeout=120s
